#!/bin/bash

#
# ╔═══╗╔═══╗╔═╗╔═╗    ╔═══╗
# ║╔═╗║║╔═╗║║║╚╝║║    ║╔═╗║
# ║╚═╝║║║ ║║║╔╗╔╗║╔══╗║║ ║║
# ║╔╗╔╝║╚═╝║║║║║║║║╔╗║║║ ║║
# ║║║╚╗║╔═╗║║║║║║║║║═╣║╚═╝║
# ╚╝╚═╝╚╝ ╚╝╚╝╚╝╚╝╚══╝╚═══╝
#
# Ramil A.
# https://github.com/rame0
# https://rame0.ru
#
# This version uses `xkblayout-state` to get and set keyboard layouts
#

###
### Originals
###
### i3-keyboard-layout
### https://github.com/porras/i3-keyboard-layout
###
### Tazeg/i3status
### https://github.com/Tazeg/i3status
###

set -e

scripts="$HOME/.config/i3/scripts/"



cycle() {

  $scripts"xkblayout-state" set +1
  pgrep i3status | xargs --no-run-if-empty kill -s USR1 # tell i3status to update
}


bg_color="#282a36ef"
fg_color="#f8f8f2"

# Print a left caret separator
# @params {string} $1 text color, ex: "#FF0000"
# @params {string} $2 background color, ex: "#FF0000"
#separator() {
#  echo -n "{"
#  echo -n "\"full_text\":\"\"," # CTRL+Ue0b2
#  echo -n "\"separator\":false,"
#  echo -n "\"separator_block_width\":0,"
#  echo -n "\"border\":\"$bg_color\","
#  echo -n "\"border_left\":0,"
#  echo -n "\"border_right\":0,"
#  echo -n "\"border_top\":0,"
#  echo -n "\"border_bottom\":0,"
#  echo -n "\"color\":\"#f1fa8c\""
#  echo -n "}"
#}
#
#common() {
#  echo -n "\"border\": \"$bg_color\","
#  echo -n "\"separator\":false,"
#  echo -n "\"separator_block_width\":0,"
#  echo -n "\"border_top\":0,"
#  echo -n "\"border_bottom\":0,"
#  echo -n "\"border_left\":0,"
#  echo -n "\"border_right\":0"
#}


bg_bar_color="#282a36"
prev_bg=$bg_bar_color

# Print a left caret separator
# @params {string} $1 text color, ex: "#FF0000"
# @params {string} $2 background color, ex: "#FF0000"
separator() {
  echo -n "{"
  echo -n "\"full_text\":\"\"," # CTRL+Ue0b2
  echo -n "\"separator\":false,"
  echo -n "\"separator_block_width\":0,"
  echo -n "\"border\":\"$2\","
  echo -n "\"border_left\":0,"
  echo -n "\"border_right\":0,"
  echo -n "\"border_top\":2,"
  echo -n "\"border_bottom\":2,"
  echo -n "\"color\":\"$1\","
  echo -n "\"background\":\"$2\""
  echo -n "}"
}

common() {
  echo -n "\"border\": \"$1\","
  echo -n "\"separator\":false,"
  echo -n "\"separator_block_width\":0,"
  echo -n "\"border_top\":2,"
  echo -n "\"border_bottom\":2,"
  echo -n "\"border_left\":0,"
  echo -n "\"border_right\":0"
}


cpu_usage() {
  #avg load (dummy)
  #data=($(uptime  | awk -F' *,? *' '{print $10, $12, $14 }'))

  data=$(awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else printf "%.2f", ($2+$4-u1) * 100 / (t-t1); }' \
<(grep 'cpu ' /proc/stat) <(sleep 1;grep 'cpu ' /proc/stat))


  local bg="#2E7D32" # vert
  separator $bg  $prev_bg
  echo -n ",{"
  echo -n "\"name\":\"id_cpu_usage\","
  # avg load output
  #echo -n "\"full_text\":\" ${data[0]}%/${data[1]}%/${data[2]}%\","

  echo -n "\"full_text\":\"${data}%\","
  echo -n "\"background\":\"$bg\","
  common $bg
  echo -n "},"
  prev_bg=$bg
}



mem_usage() {
  data=$(free -m | grep "Память" | awk '{printf "%.1f", $3/1000}')


  local bg="#3949AB"
  separator $bg  $prev_bg
  echo -n ",{"
  echo -n "\"name\":\"id_mem_usage\","
  echo -n "\"full_text\":\"${data}GiB\","
  echo -n "\"background\":\"$bg\","
  common $bg
  echo -n "},"
  prev_bg=$bg
}


get_kbdlayout() {
  layout=$($scripts"xkblayout-state" print '%s')
  variant=$($scripts"xkblayout-state" print '%v')

  local bg="#E0E0E0"
  separator $bg  $prev_bg
  echo -n ",{"
  echo -n "\"name\":\"ip_local\","
  echo -n "\"full_text\":"
  case $layout in
    "ru")
      echo -n "\"🇷🇺\""
    ;;
    "us")
      echo -n "\"🇺🇸\""
    ;;
  esac
  echo -n ","
  echo -n "\"color\":\"$fg_color\","
  echo -n "\"background\":\"$bg\","
  common $bg
  echo -n "}"
  prev_bg=$bg

}



myvpn_on() {
  local color="#ff5555"
  local icon="❌"
  if [ -d /proc/sys/net/ipv4/conf/tun0 ]; then
    color="#50fa7b" # rouge
    icon="✔"
  fi

  local bg="#D69E2E"
  separator $bg  $prev_bg

  echo -n ",{"
  echo -n "\"name\":\"id_vpn\","
  echo -n "\"full_text\":\"${icon}VPN\","
  echo -n "\"color\":\"$color\","
  echo -n "\"background\":\"$bg\","
  common $bg
  echo -n "},"
  prev_bg=$bg
}

myip_local() {
  local bg="#2E7D32" # vert
  separator $bg  $prev_bg
  echo -n ",{"
  echo -n "\"name\":\"ip_local\","
  echo -n "\"full_text\":\"$(ip route get 1 | sed -n 's/.*src \([0-9.]\+\).*/\1/p')\","
  echo -n "\"color\":\"$fg_color\","
  echo -n "\"background\":\"$bg\","
  common $bg
  echo -n "},"
  prev_bg=$bg
}

pw_volume() {
  # ENG pwctl
  VOLUME=$(pactl get-sink-volume "@DEFAULT_SINK@" | awk '{print $5}' | grep -oP "\d+")
  IS_MUTED=$(pactl get-sink-mute "@DEFAULT_SINK@" | sed -n "/Mute/ s/Mute: \(.*\)/\1/p")


  icon=""
  icon_sp=("🔇" "" "" "")



  if [ "${IS_MUTED}" = "no" ]; then
      if [ "${VOLUME}" -le '1' ]; then
          icon=${icon_sp[0]}
      elif [ "${VOLUME}" -le '33' ]; then
          icon=${icon_sp[1]}
      elif [ "${VOLUME}" -le '66' ]; then
          icon=${icon_sp[2]}
      else
          icon=${icon_sp[3]}
      fi
  fi

  local bg="#673AB7"
  separator $bg  $prev_bg
  echo -n ",{"
  echo -n "\"name\":\"id_volume\","
  echo -n "\"full_text\":\"${icon} ${VOLUME}%\","
  echo -n "\"color\":\"$fg_color\","
  echo -n "\"background\":\"$bg\","
  common $bg
  echo -n "},"
  prev_bg=$bg

}


mydate() {
  local bg="#D69E2E"
  separator $bg $prev_bg
  echo -n ",{"
  #echo -n "{"
  echo -n "\"name\":\"id_time\","
  echo -n "\"full_text\":\" 🕑 $(date "+%a %d/%m/%Y %H:%M:%S") \","
  echo -n "\"color\":\"$fg_color\","
  echo -n "\"background\":\"$bg\","
  common $bg
  echo -n "},"
  prev_bg=$bg
}


i3status() {
#  while :
#  do
#    read line
#    block=$(shortcuts)$(mydate)$(cpu_usage)$(mem_usage)$(myip_local)$(pw_volume)$(myvpn_on)$(get_kbdlayout)
#
#    echo ",[$block]" > /home/ra/test.txt
#    #echo "${line}" > /home/ra/test.txt
#    echo "${line/\}\]/\},$block\]}"|| exit 1
#  done

# https://github.com/i3/i3/blob/next/contrib/trivial-bar-script.sh
echo '{ "version": 1, "click_events":true }'     # Send the header so that i3bar knows we want to use JSON:
echo '['                    # Begin the endless array.
echo '[]'
(while :;
do
  prev_bg=$bg_bar_color
  echo -n ",["
  mydate
  cpu_usage
  mem_usage
  myip_local
  pw_volume
  myvpn_on
  get_kbdlayout
  echo "]"
  #sleep 10
done) &

# click events
while read line;
do

  # TERMINAL
  if [[ $line == *"name"*"id_shortcuts"* ]]; then
    foot -e ~/.config/sway/shortcuts.sh &

  # CONNECTION
  elif [[ $line == *"name"*"id_conn"* ]]; then
    foot -e nmtui &

  # MEMORY
  elif [[ $line == *"name"*"id_mem_usage"* ]]; then
    foot -e htop &

  # TIME
  elif [[ $line == *"name"*"id_time"* ]]; then
    foot -e ~/.config/sway/click_time.sh &

  # VOLUME
  elif [[ $line == *"name"*"id_volume"* ]]; then
    foot -e alsamixer &

  # LOGOUT
  elif [[ $line == *"name"*"id_logout"* ]]; then
    swaynag -t warning -m $(whoami) -b 'PowerOff' 'foot poweroff' -b 'Restart' 'foot reboot' -b 'Logout' 'swaymsg exit'> /dev/null &

  fi
done

}

subcommand="$1"
shift || (echo "Please specify one of: get, set <layout>, cycle <layout1> <layout2> ... <layoutN>, i3status" && exit)

case $subcommand in
  "get")
    echo -n $(get_kbdlayout)
    ;;
  "cycle")
    cycle "$@"
    ;;
  "i3status")
    i3status
    ;;
esac
